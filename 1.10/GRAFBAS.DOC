*******************************************************************************
* 'Int10A' - This is the Assembly language calling interface for the GRAFIX   *
*	     driver.  It loads the register values from the input register    *
*	     array, and calls GRAFIX.  It is used only for CALLS to GRAFIX    *
*	     that do not need a return value.				      *
*									      *
*	     Example:							      *
*	       CALL Int10A(SEG InRegs%(0)) (QuickBASIC)			      *
*	       CALL Int10A(InRegs%(0)) (TURBO BASIC)			      *
*******************************************************************************

*******************************************************************************
* 'Int10B' - This is the Assembly language calling interface for the GRAFIX   *
*	     driver.  It loads the register values from the input register    *
*	     array, calls GRAFIX, and then returns any register values in the *
*	     output register array.					      *
*									      *
*	     Example:							      *
*	       CALL Int10(SEG InRegs%(0), SEG OutRegs%(0)) (QuickBASIC)       *
*	       CALL Int10(InRegs%(0), OutRegs%(0)) (TURBO BASIC)	      *
*******************************************************************************

*******************************************************************************
* Animate - Animates an image as described in the 'ExtPut' function.  It      *
*	    automatically transfers and erases the image all in one step. The *
*	    The Duration% is the amount (1-65535) of time to pause between    *
*	    the transfer and erase stages of the function. This can help      *
*	    adjust the amount of flicker.				      *			 *
*									      *
*	    Example:							      *
*	      CALL Animate(10, 10, Image%(), 1000)			      *
*******************************************************************************

*******************************************************************************
* 'AudioOff' - Turns off all current sounds and noise off and disables sound  *
*	       and noise buffering.					      *
*									      *
*	       Example:							      *
*		  CALL AudioOff						      *
*******************************************************************************

*******************************************************************************
* 'ClearKey' - Clears the keyboard buffer.				      *
*									      *
*		   Example:						      *
*		     CALL ClearKey					      *
*******************************************************************************

*******************************************************************************
* 'ClearScreen' - Clears the graphics screen using the current background     *
*		  color.						      *
*									      *
*		  Example:						      *
*		    CALL ClearScreen					      *
*******************************************************************************

*******************************************************************************
* 'ColorOff' - Turns the color enable off for use with a monochrome composit  *
*	       monitor.							      *
*									      *
*	       Example:							      *
*		 CALL ColorOff						      *
*******************************************************************************

*******************************************************************************
* 'ColorOn' - Turns the color enable on.  This is useful if you had turned it *
*	      off with the ColorOff statement.				      *
*									      *
*	      Example:							      *
*		CALL ColorOn						      *
*******************************************************************************

*******************************************************************************
* 'CurrentPoint' - Returns the current X,Y coordinates.			      *
*									      *
*		   Examples:						      *
*		     CALL CurrentPoint(X%, Y%)				      *
*******************************************************************************

*******************************************************************************
* 'CursorOff' - Sets the graphics cursor off making it invisible.	      *
*									      *
*		   Example:						      *
*		     CALL CursorOff					      *
*******************************************************************************

*******************************************************************************
* 'CursorOn' - Sets the graphics cursor on making it visible.		      *
*									      *
*		  Example:						      *
*		    CALL CursorOn					      *
*******************************************************************************

*******************************************************************************
* 'CursorStatus' - Returns the current cursor status and size.		      *
*		   Status%:						      *
*			    0 = Off					      *
*			    1 = On					      *
*		   SizeStatus%:						      *
*			    0 = Normal Size				      *
*			    1 = Half Size				      *
*									      *
*		   Example:						      *
*		     CALL CursorStatus(Status%, SizeStatus%)		      *
*******************************************************************************

*******************************************************************************
* 'DrawBox' - Draws a line box from X1,Y1 to X2,Y2 using the specified color  *
*	      ignoring current drawing color.				      *
*									      *
*	      Examples:							      *
*		CALL DrawBox(0, 0, 50, 75, 1)				      *
*******************************************************************************

*******************************************************************************
* 'DrawBoxC' - Draws a line box from X1,Y1 to X2,Y2 using the current drawing *
*	       color.							      *
*									      *
*	       Examples:						      *
*		 CALL DrawBoxC(0, 0, 50, 75)				      *
*******************************************************************************

*******************************************************************************
* 'EnableGraphics' - Enters the 320 X 200 X 16 color graphics screen mode.    *
*		     Verifies the GRAFIX driver is loaded before attempting   *
*		     to enter the graphics mode.			      *
*									      *
*		     Example:						      *
*		       CALL EnableGraphics				      *
*******************************************************************************

*******************************************************************************
* 'ExitGraphics' - Leaves the 320 X 200 X 16 color graphics screen mode and   *
*		   enter the 80 X 25 color text screen mode.		      *
*									      *
*		   Example:						      *
*		     CALL ExitGraphics					      *
*******************************************************************************

*******************************************************************************
* 'ExtCircle' - Draws a circle at X,Y with the specified radius.  It uses the *
*		current values of XAspect & YAspect which default to 6/5,     *
*		unless set using 'SetAspect'. It also uses the current	      *
*		drawing color						      *
*									      *
*		Example:						      *
*		  CALL ExtCircle(160, 100, 75)				      *
*******************************************************************************

*******************************************************************************
* 'ExtCircleC' - Draws a circle at X,Y with the specified radius.  It uses    *
*		 the current values of XAspect & YAspect which default to 6/5 *
*		 unless set using 'SetAspect'. It also uses the specified     *
*		 color ignoring the current drawing color		      *
*									      *
*		 Example:						      *
*		   CALL ExtCircleC(160, 100, 75, 4)			      *
*******************************************************************************

*******************************************************************************
* 'ExtGet' - Stores a graphics image from X1,Y1 to X2,Y2 into the specified   *
*	     array.  The array size can be calculated using the following     *
*	     formula:							      *
*		 INT(H * W / 4) + 6					      *
*		 H - Number of pixels high				      *
*		 W - Number of pixels wide				      *
*	     The array MUST be an integer array for the 'ExtGet' function to  *
*	     work.							      *
*									      *
*	     Example:							      *
*	       ExtGet 0, 0, 50, 75, Array%()				      *
*******************************************************************************

*******************************************************************************
* 'ExtLine' - Draws a line from X1,Y1 to X2,Y2 using the current drawing      *
*	      color.							      *
*									      *
*	      Example:							      *
*		CALL ExtLine(10, 15, 100, 150)				      *
*******************************************************************************

*******************************************************************************
* 'ExtLineC' - Draws a line from X1,Y1 to X2,Y2 using the specified color     *
*	       ignoring the current drawing color.			      *
*									      *
*	       Example:							      *
*		 CALL ExtLineC(10, 15, 100, 150, 1)			      *
*******************************************************************************

*******************************************************************************
* 'ExtPaint' - Fills an enclosed shape starting at X,Y with 'FillColor%'      *
*	       which is bounded by 'BoundryColor%'.			      *
*									      *
*	       Example:							      *
*		 CALL ExtPaint(100, 10, 5, 14)				      *
*******************************************************************************

*******************************************************************************
* 'ExtPut' - Transfers a graphics image stored with 'ExtGet' starting at X,Y  *
*	     using the specified action.  Action is 1 of 5 options described  *
*	     as follows:						      *
*	       1 = Preset - Produces a numeric opposite of the color stored   *
*			    in the array:				      *
*				      Array Color   Screen Color	      *
*				      -----------   ------------	      *
*					  00		 15		      *
*					  01		 14		      *
*					  02		 13		      *
*					  03		 12		      *
*					  04		 11		      *
*					  05		 10		      *
*					  06		 09		      *
*					  07		 08		      *
*					  08		 07		      *
*					  09		 06		      *
*					  10		 05		      *
*					  11		 04		      *
*					  12		 03		      *
*					  13		 02		      *
*					  14		 01		      *
*					  15		 00		      *
*									      *
*	       2 = Pset - Transfers the image exactly as it was stored.       *
*									      *
*	       3 = And - Transfers the image over the existing image.	      *
*									      *
*	       4 = Or - Superimposes the image onto the existing image.       *
*									      *
*	       5 = Xor - Inverts the points on the screen where a point       *
*			 exists in the array image.  When PUT against a       *
*			 background twice, the background is restored.	This  *
*			 allows animation to take place.  To perform	      *
*			 animation do the following:			      *
*			   1) PUT the object on the screen.		      *
*			   2) Calculate the next X,Y position.		      *
*			   3) PUT the object at the previous X,Y position.    *
*			   4) Repeat Step 1.				      *
*									      *
*	     Example:							      *
*	       CALL ExtPut(10, 20, Array%(), 5)				      *
*******************************************************************************

*******************************************************************************
* 'ExtSound' - Generates a sound with the specified frequency, duration,      *
*	       volume, and voice.					      *
*									      *
*	       Frequency% is a number 110 - 32767:			      *
*		 This is the tone to produce in Hertz.	Certain frequencies   *
*		 correspond to musical notes for example the following chart  *
*		 starts at middle C:					      *
*									      *
*		   C -	523.25						      *
*		   D -	587.33						      *
*		   E -	659.26						      *
*		   F -	698.46						      *
*		   G -	783.99						      *
*		   A -	880.00						      *
*		   B -	987.77						      *
*		   C - 1045.50						      *
*									      *
*		 To produce notes in the octave above middle C look up the    *
*		 note's frequency in the above chart and multiply it by 2.    *
*									      *
*		 To produce notes in the octave below middle C follow the     *
*		 same procedure only divide by 2 instead.		      *
*									      *
*	       Duration% is a number 0 - 32767:				      *
*		 This is the number of clock ticks the sound will last.       *
*		 Clock ticks occur 18.2 times a second, so a number of 18     *
*		 will make the sound last approximately 1 second.	      *
*									      *
*		 There are 1092 clock ticks per minute.  To find the number   *
*		 of clock ticks for one beat, divide the beats per minute     *
*		 into 1092.  The following chart gives the number of clock    *
*		 ticks for some common tempos:				      *
*									      *
*				 Beats Per	 Ticks			      *
*		   Tempo	  Minute       Per Minute		      *
*		   -----	 --------      ----------		      *
*		   Largo	  40- 60       27.3 -18.2		      *
*		   Larghetto	  60- 66       18.2 -16.55		      *
*		   Adagio	  66- 70       16.55-14.37		      *
*		   Andante	  76-108       14.37-10.11		      *
*		   Moderato	 108-120       10.11- 9.1		      *
*		   Allegro	 120-168	9.1 - 6.5		      *
*		   Presto	 168-208	6.5 - 5.25		      *
*									      *
*	       Volume% is a number 0 - 15:				      *
*		 0 is the quietest.					      *
*		 15 is the loudest.					      *
*									      *
*	       Voice% is a number 0 - 2:				      *
*		 This is the sound channel to use when producing the sound.   *
*		 You can set each voice to a diffenent tone to make a 3-note  *
*		 chord.							      *
*									      *
*		Example:						      *
*		  CALL ExtSound(880, 8, 7, 0)				      *
*******************************************************************************

*******************************************************************************
* 'FillBox' - Draws a solid box from X1,Y1 to X2,Y2 using the specified       *
*	      color ignoring the current drawing color.			      *
*									      *
*	      Example:							      *
*		CALL FillBox(0, 0, 100, 75, 1)				      *
*******************************************************************************

*******************************************************************************
* 'FillBoxC' - Draws a solid box from X1,Y1 to X2,Y2 using the current	      *
*	       drawing color.						      *
*									      *
*	       Example:							      *
*		 CALL FillBoxC(0, 0, 100, 75)				      *
*******************************************************************************

*******************************************************************************
* 'GetAspect' - Returns the current XAspect & YAspect values.		      *
*									      *
*		Example:						      *
*		  CALL GetAspect(X%, Y%)				      *
*******************************************************************************

*******************************************************************************
* 'GetBackColor' - Returns the current background color setting.	      *
*									      *
*		   Example:						      *
*		     CALL GetBackColor(BackColor%)			      *
*******************************************************************************

*******************************************************************************
* 'GetCursor' - Returns the current row and column.			      *
*									      *
*		Example:						      *
*		  CALL GetCursor(Row%, Column%)				      *
*******************************************************************************

*******************************************************************************
* 'GetInput' - Allows input of string variables while in the 320 x 200 x 16   *
*	       color graphics mode.  It provides most of the editting	      *
*	       capabilities of BASIC's INPUT function.  The keys that are     *
*	       listed show what editting functions are currently handled.  To *
*	       input a number use the VAL function after inputting the string *
*	       variable:						      *
*		 ExtInput "Enter Number ", Num$				      *
*		 Num# = VAL(Num$)					      *
*									      *
*	       The following keys are trapped:				      *
*		  Back Space						      *
*		  Enter							      *
*		  Esc							      *
*		  ASCII Characters 32 - 126				      *
*		  Home							      *
*		  Cursor Left						      *
*		  Cursor Right						      *
*		  End							      *
*		  Insert						      *
*		  Delete						      *
*									      *
*	       Example:							      *
*		 CALL GetInput("Enter Your Name ", A$)			      *
*******************************************************************************

*******************************************************************************
* 'GetPlotColor' - Returns the current drawing color.			      *
*									      *
*		   Example:						      *
*		     CALL GetPlotColor(PlotColor%)			      *
*******************************************************************************

*******************************************************************************
* 'GetTextColor' - Returns the current text color.			      *
*									      *
*		   Example:						      *
*		     CALL GetTextColor(TextColor%)			      *
*******************************************************************************

*******************************************************************************
* 'GraphStatus' - Returns the whether the graphics functions are enabled or   *
*		  disabled.						      *
*									      *
*		    0 = Disabled					      *
*		    1 = Enabled						      *
*									      *
*		Example:						      *
*		  CALL GraphStatus(Status%)				      *
*******************************************************************************

*******************************************************************************
* 'HalfCursor' - Sets the cursor to half size.				      *
*									      *
*		   Example:						      *
*		     CALL HalfCursor					      *
*******************************************************************************

*******************************************************************************
* 'LineRel' - Draws a line a relative distance from the current X,Y position  *
*	      using the current drawing color.				      *
*									      *
*	      Examples:							      *
*		CALL LineRel(10, 10)					      *
*		CALL LineRel(-10, -5)					      *
*******************************************************************************

*******************************************************************************
* 'LineRelC' - Draws a line a relative distance from the current X,Y position *
*	       using the specified color ignoring the current drawing color.  *
*									      *
*	       Examples:						      *
*		 CALL LineRelC(10, 10, 6)				      *
*		 CALL LineRelC(-10, -5, 6)				      *
*******************************************************************************

*******************************************************************************
* 'LineTo' - Draw a line to specified X,Y position from the current X,Y       *
*	     position using the current drawing color.			      *
*									      *
*	     Example:							      *
*	       CALL LineTo(50, 75)					      *
*******************************************************************************

*******************************************************************************
* 'LineToC' - Draw a line to specified X,Y position from the current X,Y      *
*	      position using the specified color ignoring the current drawing *
*	      color.							      *
*									      *
*	      Example:							      *
*		CALL LineToC(50, 75, 9)					      *
*******************************************************************************

*******************************************************************************
* 'MoveRel' - Moves a relative distance from the current X,Y position without *
*	      plotting any points.					      *
*									      *
*	      Examples:							      *
*		CALL MoveRel(15, 20)					      *
*		CALL MoveRel(-10, -15)					      *
*******************************************************************************

*******************************************************************************
* 'MoveTo' - Moves to the specified X,Y position from the current X,Y	      *
*	     position without plotting any points.			      *
*									      *
*	     Example:							      *
*	       CALL MoveTo(0, 10)					      *
*******************************************************************************

*******************************************************************************
* 'Noise' - Generates a periodic or white noise sound, with the indicated     *
*	    volume, for the specified length of time.			      *
*									      *
*	    Source is a number 0-7:					      *
*	      0-3 are periodic noises.					      *
*	      4-7 are white noises.					      *
*									      *
*	    Volume is a number 0-15:					      *
*	      0 is the quietest.					      *
*	      15 is the loudest.					      *
*									      *
*	    Duration is a number 0 to 32767:				      *
*	      It indicates how many clock ticks the noise should last.	Clock *
*	      ticks occur 18.2 times a second, so a value of 18 would make    *
*	      the noise last about 1 second.				      *
*									      *
*		   Example:						      *
*		     CALL Noise(4, 8, 12)				      *
*******************************************************************************

*******************************************************************************
* 'NoiseBufOff' - Disables background processing of noises in the noise       *
*		  buffer.						      *
*									      *
*		  Example:						      *
*		    CALL NoiseBufOff					      *
*******************************************************************************

*******************************************************************************
* 'NoiseBufOn' - Enables the 32 entry noise buffer for processing of noises   *
*		 in background.  Background processing is off by default.     *
*									      *
*		 Example:						      *
*		   CALL NoiseBufOn					      *
*******************************************************************************

*******************************************************************************
* 'NoiseOff' - Turns off all current noises off and disables noise	      *
*	       buffering.						      *
*									      *
*	       Example:							      *
*		  CALL NoiseOff						      *
*******************************************************************************

*******************************************************************************
* 'NormalCursor' - Sets the cursor to normal size.			      *
*									      *
*		   Example:						      *
*		     CALL NormalCursor					      *
*******************************************************************************

*******************************************************************************
* 'PaletteUsing' - Changes the color palette using 15 elements of an integer  *
*		   array starting with the indicated index value.  Each array *
*		   element holds the new color value for the corresponding    *
*		   palette entry.					      *
*									      *
*		   Example:						      *
*		     CALL PaletteUsing(Array%(), Index%)		      *
*******************************************************************************

*******************************************************************************
* 'Pause' - Delays a program for the specified number of clock ticks.  Clock  *
*	    ticks occur 18.2 times a second, so a number of 37 would delay    *
*	    a program approximately 2 seconds.	This function has the	      *
*	    advantage being more precise than a high level language delay     *
*	    loop because it uses an assembly language interface.  Use it when *
*	    you need to delay for a precise number of clock ticks.	      *
*									      *
*	    Example:							      *
*	      CALL Pause(20)						      *
*******************************************************************************

*******************************************************************************
* 'PlotPoint' - Plots a point at the specified X,Y position using the current *
*		drawing color.						      *
*									      *
*		Example:						      *
*		  CALL PlotPoint(160, 100)				      *
*******************************************************************************

*******************************************************************************
* 'PlotPointC' - Plots a point at the specified X,Y position using the	      *
*		 specified color ignoring the current drawing color.	      *
*									      *
*		 Example:						      *
*		   CALL PlotPointC(160, 100, 14)			      *
*******************************************************************************

*******************************************************************************
* 'PointColor' - Returns the color for the point at the specified X,Y	      *
*		 position.						      *
*									      *
*		 Example:						      *
*		   CALL PointColor(100, 100, PixelColor%)		      *
*******************************************************************************

*******************************************************************************
* 'PrintString' - Prints a string and advances to the next line.  To print    *
*		  several strings at the same time don't use a semicolon, use *
*		  the '+' operator instead.  To print a number use the STR$   *
*		  function.						      *
*									      *
*		  Examples:						      *
*		    CALL PrintString(GS$)				      *
*		    CALL PrintString("Press Any Key To Exit")		      *
*		    CALL PrintString(A$ + "Hi There" + B$)		      *
*		    CALL PrintString("Total =" + STR$(Total%))		      *
*******************************************************************************

*******************************************************************************
* 'PrintStringX' - Prints a string, but does not advance to the next line.    *
*		   To print several strings at the same time don't use a      *
*		   semicolon, use the '+' operator instead.  To print a       *
*		   number use the STR$ function.			      *
*									      *
*		  Examples:						      *
*		    CALL PrintStringX(GS$)				      *
*		    CALL PrintStringX("Press Any Key To Exit")		      *
*		    CALL PrintStringX(A$ + "Hi There" + B$)		      *
*		    CALL PrintStringX("Total =" + STR$(Total%))		      *
*******************************************************************************

*******************************************************************************
* 'ResetPalette' - Resets the color palette to the default state.	      *
*		   NOTE:  This functions reset the background & border colors *
*			  to Black again.				      *
*									      *
*		   Example:						      *
*		     CALL ResetPalette					      *
*******************************************************************************

*******************************************************************************
* 'SetAspect' - Sets the X & Y portions of the aspect ratio for drawing       *
*		circles.						      *
*									      *
*		Example:						      *
*		  CALL SetAspect(12, 5)					      *
*******************************************************************************

*******************************************************************************
* 'SetBackColor' - Sets the current background color and border color.	      *
*									      *
*		   Example:						      *
*		     CALL SetBackColor(7)				      *
*******************************************************************************

*******************************************************************************
* 'SetCursor' - Sets the current cursor position for printing text on the     *
*		graphics screen.					      *
*									      *
*		NOTE:  Row must be 1-25 & Column must be 1-40.		      *
*									      *
*		Example:						      *
*		  CALL SetCursor(10, 1)					      *
*******************************************************************************

*******************************************************************************
* 'SetPalette' - Allows you to redefine any one of the 16 colors.  This is    *
*		 done by specifying the color number to change followed by    *
*		 the color to replace it.				      *
*									      *
*		 Example:						      *
*		   CALL SetPalette(1, 10)				      *
*******************************************************************************

*******************************************************************************
* 'SetPlotColor' - Sets the current drawing color.			      *
*									      *
*		   Example:						      *
*		     CALL SetPlotColor(5)				      *
*******************************************************************************

*******************************************************************************
* 'SetTextColor' - Sets the current text color used by 'PrintString'.	      *
*									      *
*		   Example:						      *
*		     CALL SetTextColor(14)				      *
*******************************************************************************

*******************************************************************************
* 'SoundBufOff' - Disables background processing of sounds in the sound       *
*		  buffer.						      *
*									      *
*		  Example:						      *
*		    CALL SoundBufOff					      *
*******************************************************************************

*******************************************************************************
* 'SoundBufOn' - Enables the 32 entry sound buffer for processing of sounds   *
*		 in background.  Background processing is off by default.     *
*									      *
*		 Example:						      *
*		   CALL SoundBufOn					      *
*******************************************************************************


*******************************************************************************
* 'SoundOff' - Turns off all current sounds off and disables sound	      *
*	       buffering.						      *
*									      *
*	       Example:							      *
*		  CALL SoundOff						      *
*******************************************************************************


*******************************************************************************
* 'SpeakerOff' - Disables the sound to the exterior speaker.		      *
*									      *
*		 Example:						      *
*		   CALL SpeakerOff					      *
*******************************************************************************

*******************************************************************************
* 'SpeakerOn' - Enables the sound to the exterior speaker.		      *
*									      *
*		Example:						      *
*		  CALL SpeakerOn					      *
*******************************************************************************

*******************************************************************************
* 'WaitKey' - Pauses the program and waits for a key to be pressed on the     *
*	      keyboard.							      *
*									      *
*		   Example:						      *
*		     CALL WaitKey					      *
*******************************************************************************
